pipeline {
    agent any
    
    stages {
        stage('Build') {
            steps {
                echo 'Building the code using Maven'
                // Placeholder for actual build commands using Maven
            }
            post {
                success {
                    mail to: "starlymiracle@gmail.com",
	subject: "Build Status Email",
        body: "Build success"
        attachLog: true
                }
                failure {
                    sendEmailNotification('Build', 'FAILURE')
                }
            }
        }
        stage('Unit and Integration Tests') {
            steps {
                echo 'Running unit and integration tests'
                // Placeholder for actual commands to run unit and integration tests
            }
            post {
                success {
                    sendEmailNotification('Unit and Integration Tests', 'SUCCESS')
                }
                failure {
                    sendEmailNotification('Unit and Integration Tests', 'FAILURE')
                }
            }
        }
        stage('Code Analysis') {
            steps {
                echo 'Running code analysis'
                // Placeholder for actual commands to run code analysis
            }
            post {
                success {
                    sendEmailNotification('Code Analysis', 'SUCCESS')
                }
                failure {
                    sendEmailNotification('Code Analysis', 'FAILURE')
                }
            }
        }
        stage('Security Scan') {
            steps {
                echo 'Performing security scan'
                // Placeholder for actual commands to perform security scan
            }
            post {
                success {
                    sendEmailNotification('Security Scan', 'SUCCESS')
                }
                failure {
                    sendEmailNotification('Security Scan', 'FAILURE')
                }
            }
        }
        stage('Deploy to Staging') {
            steps {
                echo 'Deploying the application to staging server'
                // Placeholder for actual commands to deploy to staging server
            }
            post {
                success {
                    sendEmailNotification('Deploy to Staging', 'SUCCESS')
                }
                failure {
                    sendEmailNotification('Deploy to Staging', 'FAILURE')
                }
            }
        }
        stage('Integration Tests on Staging') {
            steps {
                echo 'Running integration tests on staging environment'
                // Placeholder for actual commands to run integration tests on staging
            }
            post {
                success {
                    sendEmailNotification('Integration Tests on Staging', 'SUCCESS')
                }
                failure {
                    sendEmailNotification('Integration Tests on Staging', 'FAILURE')
                }
            }
        }
        stage('Deploy to Production') {
            steps {
                echo 'Deploying the application to production server'
                // Placeholder for actual commands to deploy to production server
            }
            post {
                success {
                    sendEmailNotification('Deploy to Production', 'SUCCESS')
                }
                failure {
                    sendEmailNotification('Deploy to Production', 'FAILURE')
                }
            }
        }
    }
    
    post {
        always {
            sendEmailNotification('Pipeline', currentBuild.result)
        }
    }
}

def sendEmailNotification(stageName, status) {
   	mail to: "starlymiracle@gmail.com",
	subject: "Build Status Email",
        body: "Build success"
        attachLog: true

}
